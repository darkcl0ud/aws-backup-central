AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  OrgId:
    Type: String
  PrimaryKeyArn:
    Type: String
  PrimaryRegion:
    Type: String
Resources:
  KMSKeyReplica:
    Type: AWS::KMS::ReplicaKey
    Properties:
      Description: KMS Key for Organization RDS Backup Vaults
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow organization to use key
            Effect: Allow
            Principal: '*'
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
              - kms:RetireGrant
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
          - Sid: Allow organization to set resource grants
            Effect: Allow
            Principal: '*'
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
              Bool:
                kms:GrantIsForAWSResource: true
      PendingWindowInDays: 7
      PrimaryKeyArn: !Ref PrimaryKeyArn
      Tags: 
        - Key: project
          Value: backup
  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/backup-cmk
      TargetKeyId: !Ref KMSKeyReplica
  Vault:
    Type: AWS::Backup::BackupVault
    Properties:
      AccessPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable backup vault access
            Effect: Allow
            Principal: '*'
            Action:
              - backup:CopyFromBackupVault
              - backup:CopyIntoBackupVault
            Resource: '*'
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
      BackupVaultName: !Sub central-backup-vault
      BackupVaultTags:
        project: backup
      EncryptionKeyArn: !GetAtt KMSKeyReplica.Arn
  EventBusPolicy: 
    Type: AWS::Events::EventBusPolicy
    Properties: 
      StatementId: org-place-events
      Statement: 
        Effect: Allow
        Principal: '*'
        Action: events:PutEvents
        Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        Condition:
          StringEquals:
            aws:PrincipalOrgID: !Ref OrgId
  BackupIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: backup.amazonaws.com
          Action: sts:AssumeRole
      Description: Role for aws backup on rds backups
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      MaxSessionDuration: 3600
      RoleName: rds-backup-role
      Tags: 
        - Key: project
          Value: backup
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-rds-backup-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
      Policies:
        - PolicyName: lambda-logging-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:*:*:*
        - PolicyName: pass-backup-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt BackupIAMRole.Arn
        - PolicyName: backup-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - backup:StartCopyJob
                - backup:ListTags
                - backup:DescribeRecoveryPoint
              Resource: '*'
  PrimaryRegionBackupCopyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to automate copy of resources to primary region
      Events:
        EBBackupRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                state:
                  - COMPLETED
                destinationBackupVaultArn:
                  - !GetAtt Vault.BackupVaultArn
              detail-type:
                - Copy Job State Change
              source: 
                - aws.backup
            RetryPolicy:
              MaximumRetryAttempts: 3
              MaximumEventAgeInSeconds: 900
      FunctionName: backup-rds-cross-account
      Handler: index.app
      InlineCode: !Sub |
        import boto3, logging
        def app(event, context):
          try:
            print(f'Processing Event : {event}')
            eventDetail = event.get('detail')
            destinationRecoveryPointArn = eventDetail.get('destinationRecoveryPointArn')
            backup = boto3.client('backup')
            response = backup.start_copy_job(
              RecoveryPointArn=destinationRecoveryPointArn,
              SourceBackupVaultName='central-backup-vault',
              DestinationBackupVaultArn='arn:aws:backup:${PrimaryRegion}:${AWS::AccountId}:backup-vault:central-backup-vault',
              IamRoleArn='${BackupIAMRole.Arn}'
            )
            print(f'start_copy_job done : {response}')
          except Exception as e:
            logging.error(e)
      MemorySize: 256
      PackageType: Zip
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
Outputs:
  KMSArn:
    Value: !GetAtt KMSKeyReplica.Arn
  OrganizationId:
    Value: !Ref OrgId